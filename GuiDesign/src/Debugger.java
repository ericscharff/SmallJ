import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class Debugger
{
	public static void main( String[] args )
	{
		new Debugger().show();
	}

	void show()
	{
		frame = new JFrame( "Debugger" );
		frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
		frame.setContentPane( notNeeded );
		ImageIcon icon = new ImageIcon( getClass().getResource( "/SmallJIcon.png" ) );
		frame.setIconImage( icon.getImage() );
		frame.pack();
		frame.setLocationRelativeTo( null );
		frame.setVisible( true );
	}

	JFrame frame;
	JPanel notNeeded;
	JPanel errorPanel;
	JLabel errorLabel;
	JTextField errorTextField;
	JList contextList;
	private JTable argumentTable;
	private JScrollPane contextScrollPane;
	private JScrollPane argumentScrollPane;
	private JList argumentList;
	private JTabbedPane frameTabbedPane;
	private JPanel contextTab;
	private JPanel inspectorTab;

	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$()
	{
		notNeeded = new JPanel();
		notNeeded.setLayout( new BorderLayout( 0, 4 ) );
		notNeeded.setBorder( BorderFactory.createTitledBorder( BorderFactory.createEmptyBorder( 4, 4, 4, 4 ), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null ) );
		frameTabbedPane = new JTabbedPane();
		notNeeded.add( frameTabbedPane, BorderLayout.CENTER );
		contextTab = new JPanel();
		contextTab.setLayout( new BorderLayout( 0, 0 ) );
		frameTabbedPane.addTab( "Context", contextTab );
		errorPanel = new JPanel();
		errorPanel.setLayout( new BorderLayout( 4, 0 ) );
		contextTab.add( errorPanel, BorderLayout.NORTH );
		errorLabel = new JLabel();
		errorLabel.setText( "Error" );
		errorPanel.add( errorLabel, BorderLayout.WEST );
		errorTextField = new JTextField();
		errorTextField.setBackground( new Color( - 328966 ) );
		errorTextField.setEditable( false );
		errorTextField.setText( "Illegal color value" );
		errorPanel.add( errorTextField, BorderLayout.CENTER );
		contextScrollPane = new JScrollPane();
		contextTab.add( contextScrollPane, BorderLayout.WEST );
		contextScrollPane.setBorder( BorderFactory.createTitledBorder( null, "Call Stack", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null ) );
		contextList = new JList();
		Font contextListFont = this.$$$getFont$$$( null, Font.PLAIN, - 1, contextList.getFont() );
		if( contextListFont != null ) contextList.setFont( contextListFont );
		final DefaultListModel defaultListModel1 = new DefaultListModel();
		defaultListModel1.addElement( "error: - Color" );
		defaultListModel1.addElement( "red:green:blue: - Color" );
		defaultListModel1.addElement( "red:green:blue: - MetaColor" );
		defaultListModel1.addElement( "doIt - Undefined" );
		contextList.setModel( defaultListModel1 );
		contextList.setSelectionForeground( new Color( - 16777216 ) );
		contextScrollPane.setViewportView( contextList );
		argumentScrollPane = new JScrollPane();
		contextTab.add( argumentScrollPane, BorderLayout.CENTER );
		argumentScrollPane.setBorder( BorderFactory.createTitledBorder( null, "Self & Arguments", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null ) );
		argumentList = new JList();
		Font argumentListFont = this.$$$getFont$$$( null, Font.PLAIN, - 1, argumentList.getFont() );
		if( argumentListFont != null ) argumentList.setFont( argumentListFont );
		final DefaultListModel defaultListModel2 = new DefaultListModel();
		defaultListModel2.addElement( "Color( nil, nil, nil )" );
		defaultListModel2.addElement( "1" );
		defaultListModel2.addElement( "22" );
		defaultListModel2.addElement( "333" );
		argumentList.setModel( defaultListModel2 );
		argumentScrollPane.setViewportView( argumentList );
		inspectorTab = new JPanel();
		inspectorTab.setLayout( new BorderLayout( 0, 0 ) );
		frameTabbedPane.addTab( "Color", inspectorTab );
	}

	/**
	 * @noinspection ALL
	 */
	private Font $$$getFont$$$( String fontName, int style, int size, Font currentFont )
	{
		if( currentFont == null ) return null;
		String resultName;
		if( fontName == null ) {
			resultName = currentFont.getName();
		} else {
			Font testFont = new Font( fontName, Font.PLAIN, 10 );
			if( testFont.canDisplay( 'a' ) && testFont.canDisplay( '1' ) ) {
				resultName = fontName;
			} else {
				resultName = currentFont.getName();
			}
		}
		return new Font( resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize() );
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$()
	{
		return notNeeded;
	}

	private void createUIComponents()
	{
		String[] columns = { "Variable", "Value" };
		String[][] rows = { { "red", "1" }, { "green", "22" }, { "blue", "333" } };

		// variablesTable = new JTable( rows, columns );

		DefaultTableModel tableModel = new DefaultTableModel();

		tableModel.addColumn( columns[ 0 ] );
		tableModel.addColumn( columns[ 1 ] );

		for( String[] row : rows ) {
			tableModel.addRow( row );
		}

		argumentTable = new JTable( tableModel );
		argumentTable.setDefaultEditor( Object.class, null );

		argumentTable.addMouseListener( new MouseAdapter()
		{
			public void mouseClicked( MouseEvent mouseEvent )
			{
				onTableClicked( mouseEvent );
			}
		} );
	}

	void onTableClicked( MouseEvent mouseEvent )
	{
		if( mouseEvent.getClickCount() != 2 )  // to detect double click events
			return;

		int row = argumentTable.getSelectedRow();
		int column = argumentTable.getSelectedColumn();
		Object string = argumentTable.getValueAt( row, column );
		JOptionPane.showMessageDialog( null, string );
	}
}
