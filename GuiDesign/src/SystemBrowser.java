import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;

public class SystemBrowser
{
	public static void main( String[] args )
	{
		new SystemBrowser().show();
	}

	void show()
	{
		frame = new JFrame( "System Browser" );
		frame.setContentPane( formPanel );
		frame.pack();
		ImageIcon icon = new ImageIcon( getClass().getResource( "/SmallJIcon.png" ) );
		frame.setIconImage( icon.getImage() );
		frame.setLocationRelativeTo( null );
		frame.setVisible( true );
	}

	JFrame frame;

	JPanel formPanel;

	// The select and source panes are in a resizable vertically split plane.
	JSplitPane selectSourceSplitPane;

	// Panel for selecting folders, classes and methods.
	// The source file of the selected class is displayed
	// with the cursor at the position of the selected method.
	JPanel selectPanel;

	JList folderList;

	JList classList;

	JTabbedPane methodTabbedPane;
	JList instanceMethodList;
	JList classMethodList;

	JPanel sourcePanel;
	JTextArea sourceTextArea;

	JPanel compilePanel;
	JButton compileButton;
	JTextField compileResultTextField;
	private JLabel compileResultLabel;
	private JScrollPane sourceScrollPane;

	// Test panel for evaluating expressions.
	JPanel evaluatePanel;
	JButton inspectButton;
	JTextField expressionTextField;
	JLabel evaluateResultLabel;
	JTextField evaluateResultTextField;
	private JScrollPane folderScrollPane;
	private JScrollPane classScrollPane;
	private JScrollPane instanceMethodScrollPane;
	private JButton evaluateButton;
	private JScrollPane classMethodScrollPane;

	private void createUIComponents()
	{
	}

	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$()
	{
		formPanel = new JPanel();
		formPanel.setLayout( new BorderLayout( 0, 0 ) );
		evaluatePanel = new JPanel();
		evaluatePanel.setLayout( new GridBagLayout() );
		formPanel.add( evaluatePanel, BorderLayout.SOUTH );
		evaluatePanel.setBorder( BorderFactory.createTitledBorder( null, "Evaluate", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null ) );
		evaluateResultTextField = new JTextField();
		evaluateResultTextField.setBackground( new Color( - 328966 ) );
		evaluateResultTextField.setEditable( false );
		evaluateResultTextField.setText( "aa5" );
		GridBagConstraints gbc;
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 1;
		gbc.gridwidth = 2;
		gbc.weightx = 1.0;
		gbc.weighty = 1.0;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = new Insets( 4, 4, 4, 4 );
		evaluatePanel.add( evaluateResultTextField, gbc );
		inspectButton = new JButton();
		Font inspectButtonFont = this.$$$getFont$$$( null, Font.BOLD, - 1, inspectButton.getFont() );
		if( inspectButtonFont != null ) inspectButton.setFont( inspectButtonFont );
		inspectButton.setText( "Inspect" );
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.insets = new Insets( 4, 4, 4, 4 );
		evaluatePanel.add( inspectButton, gbc );
		expressionTextField = new JTextField();
		expressionTextField.setText( "'aa' + ( 2 + 3 )" );
		gbc = new GridBagConstraints();
		gbc.gridx = 2;
		gbc.gridy = 0;
		gbc.weightx = 1.0;
		gbc.weighty = 1.0;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = new Insets( 4, 4, 4, 4 );
		evaluatePanel.add( expressionTextField, gbc );
		evaluateButton = new JButton();
		Font evaluateButtonFont = this.$$$getFont$$$( null, Font.BOLD, - 1, evaluateButton.getFont() );
		if( evaluateButtonFont != null ) evaluateButton.setFont( evaluateButtonFont );
		evaluateButton.setText( "Evaluate" );
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 0;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		evaluatePanel.add( evaluateButton, gbc );
		evaluateResultLabel = new JLabel();
		Font evaluateResultLabelFont = this.$$$getFont$$$( null, Font.BOLD, - 1, evaluateResultLabel.getFont() );
		if( evaluateResultLabelFont != null ) evaluateResultLabel.setFont( evaluateResultLabelFont );
		evaluateResultLabel.setHorizontalAlignment( 0 );
		evaluateResultLabel.setHorizontalTextPosition( 11 );
		evaluateResultLabel.setText( "Result" );
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 1;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = new Insets( 4, 4, 4, 4 );
		evaluatePanel.add( evaluateResultLabel, gbc );
		selectSourceSplitPane = new JSplitPane();
		selectSourceSplitPane.setOrientation( 0 );
		formPanel.add( selectSourceSplitPane, BorderLayout.CENTER );
		selectPanel = new JPanel();
		selectPanel.setLayout( new GridBagLayout() );
		selectSourceSplitPane.setLeftComponent( selectPanel );
		folderScrollPane = new JScrollPane();
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.weightx = 0.25;
		gbc.weighty = 1.0;
		gbc.fill = GridBagConstraints.BOTH;
		selectPanel.add( folderScrollPane, gbc );
		folderScrollPane.setBorder( BorderFactory.createTitledBorder( null, "Folders", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null ) );
		folderList = new JList();
		Font folderListFont = this.$$$getFont$$$( null, Font.PLAIN, - 1, folderList.getFont() );
		if( folderListFont != null ) folderList.setFont( folderListFont );
		final DefaultListModel defaultListModel1 = new DefaultListModel();
		defaultListModel1.addElement( "Base" );
		defaultListModel1.addElement( "Collection" );
		defaultListModel1.addElement( "Compiler" );
		defaultListModel1.addElement( "Component" );
		defaultListModel1.addElement( "Event" );
		defaultListModel1.addElement( "GUI" );
		defaultListModel1.addElement( "Io" );
		defaultListModel1.addElement( "Java" );
		defaultListModel1.addElement( "Magnitude" );
		defaultListModel1.addElement( "Test" );
		folderList.setModel( defaultListModel1 );
		folderScrollPane.setViewportView( folderList );
		classScrollPane = new JScrollPane();
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 0;
		gbc.weightx = 0.25;
		gbc.fill = GridBagConstraints.BOTH;
		selectPanel.add( classScrollPane, gbc );
		classScrollPane.setBorder( BorderFactory.createTitledBorder( null, "Class", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null ) );
		classList = new JList();
		Font classListFont = this.$$$getFont$$$( null, Font.PLAIN, - 1, classList.getFont() );
		if( classListFont != null ) classList.setFont( classListFont );
		final DefaultListModel defaultListModel2 = new DefaultListModel();
		defaultListModel2.addElement( "Array" );
		defaultListModel2.addElement( "Block" );
		defaultListModel2.addElement( "Integer" );
		classList.setModel( defaultListModel2 );
		classScrollPane.setViewportView( classList );
		methodTabbedPane = new JTabbedPane();
		gbc = new GridBagConstraints();
		gbc.gridx = 2;
		gbc.gridy = 0;
		gbc.weightx = 0.5;
		gbc.weighty = 1.0;
		gbc.fill = GridBagConstraints.BOTH;
		selectPanel.add( methodTabbedPane, gbc );
		methodTabbedPane.setBorder( BorderFactory.createTitledBorder( null, "Method", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null ) );
		instanceMethodScrollPane = new JScrollPane();
		methodTabbedPane.addTab( "Instance", instanceMethodScrollPane );
		instanceMethodList = new JList();
		Font instanceMethodListFont = this.$$$getFont$$$( null, Font.PLAIN, - 1, instanceMethodList.getFont() );
		if( instanceMethodListFont != null ) instanceMethodList.setFont( instanceMethodListFont );
		final DefaultListModel defaultListModel3 = new DefaultListModel();
		defaultListModel3.addElement( "at:" );
		defaultListModel3.addElement( "at:put:" );
		defaultListModel3.addElement( "collect:" );
		instanceMethodList.setModel( defaultListModel3 );
		instanceMethodScrollPane.setViewportView( instanceMethodList );
		classMethodScrollPane = new JScrollPane();
		methodTabbedPane.addTab( "Class", classMethodScrollPane );
		classMethodList = new JList();
		Font classMethodListFont = this.$$$getFont$$$( null, Font.PLAIN, - 1, classMethodList.getFont() );
		if( classMethodListFont != null ) classMethodList.setFont( classMethodListFont );
		final DefaultListModel defaultListModel4 = new DefaultListModel();
		defaultListModel4.addElement( "new" );
		defaultListModel4.addElement( "fromString:" );
		classMethodList.setModel( defaultListModel4 );
		classMethodScrollPane.setViewportView( classMethodList );
		sourcePanel = new JPanel();
		sourcePanel.setLayout( new BorderLayout( 0, 0 ) );
		selectSourceSplitPane.setRightComponent( sourcePanel );
		sourcePanel.setBorder( BorderFactory.createTitledBorder( null, "Source", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null ) );
		compilePanel = new JPanel();
		compilePanel.setLayout( new GridBagLayout() );
		sourcePanel.add( compilePanel, BorderLayout.SOUTH );
		compileButton = new JButton();
		Font compileButtonFont = this.$$$getFont$$$( null, Font.BOLD, - 1, compileButton.getFont() );
		if( compileButtonFont != null ) compileButton.setFont( compileButtonFont );
		compileButton.setText( "Compile" );
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.insets = new Insets( 4, 4, 4, 4 );
		compilePanel.add( compileButton, gbc );
		compileResultLabel = new JLabel();
		Font compileResultLabelFont = this.$$$getFont$$$( null, Font.BOLD, - 1, compileResultLabel.getFont() );
		if( compileResultLabelFont != null ) compileResultLabel.setFont( compileResultLabelFont );
		compileResultLabel.setText( "Result:" );
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 0;
		gbc.insets = new Insets( 4, 4, 4, 4 );
		compilePanel.add( compileResultLabel, gbc );
		compileResultTextField = new JTextField();
		compileResultTextField.setBackground( new Color( - 328966 ) );
		compileResultTextField.setEditable( false );
		compileResultTextField.setHorizontalAlignment( 2 );
		compileResultTextField.setText( "Compilation succeeded." );
		compileResultTextField.putClientProperty( "html.disable", Boolean.FALSE );
		gbc = new GridBagConstraints();
		gbc.gridx = 2;
		gbc.gridy = 0;
		gbc.weightx = 1.0;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = new Insets( 4, 4, 4, 4 );
		compilePanel.add( compileResultTextField, gbc );
		sourceScrollPane = new JScrollPane();
		sourcePanel.add( sourceScrollPane, BorderLayout.CENTER );
		sourceTextArea = new JTextArea();
		Font sourceTextAreaFont = this.$$$getFont$$$( "Consolas", - 1, - 1, sourceTextArea.getFont() );
		if( sourceTextAreaFont != null ) sourceTextArea.setFont( sourceTextAreaFont );
		sourceTextArea.setTabSize( 2 );
		sourceTextArea.setText( "CLASS Object subclass: 'Test' variables: 'var1 var2'  classVariables: 'cvar1'\nMETA getCvar1\n\t^ cvar1.\n!\nMETHOD getVar2\n\t^ var2.\n!\n" );
		sourceScrollPane.setViewportView( sourceTextArea );
	}

	/**
	 * @noinspection ALL
	 */
	private Font $$$getFont$$$( String fontName, int style, int size, Font currentFont )
	{
		if( currentFont == null ) return null;
		String resultName;
		if( fontName == null ) {
			resultName = currentFont.getName();
		} else {
			Font testFont = new Font( fontName, Font.PLAIN, 10 );
			if( testFont.canDisplay( 'a' ) && testFont.canDisplay( '1' ) ) {
				resultName = fontName;
			} else {
				resultName = currentFont.getName();
			}
		}
		return new Font( resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize() );
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$()
	{
		return formPanel;
	}

}
